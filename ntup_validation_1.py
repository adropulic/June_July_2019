import glob, array, argparse, math
import ROOT
ROOT.gROOT.SetBatch(True)
import sys, os

#import the ntup
inFile1 = ROOT.TFile.Open("/afs/cern.ch/user/a/addropul/CMSSW_10_6_0_pre4/src/L1Trigger/Run3Ntuplizer/test/l1TNtuple-VBF.root ","READ")
tree = inFile1.Get("l1NtupleProducer/Stage3Regions/efficiencyTree")
if( not tree ):
    print("Error, could not get input tree")

branch_list = tree.GetListOfBranches()
branch_names = [0 for x in range(0,branch_list.GetEntries())]
for num_branch in range(0,branch_list.GetEntries()):
	branch_names[num_branch] = branch_list[num_branch].GetName()
print(branch_names)

#intially, turn off all the branches to save time
tree.SetBranchStatus("*", 1)
#tree.Show(i)
#tree.Show()
#tree.Scan()
#print(tree.GetEntries())
#turn on the branches you want to use

histograms = ROOT.TFile("histograms.root","RECREATE")
for branch_i in range(0, branch_list.GetEntries()):
	hist_name = 'h_'+ str(branch_names[branch_i])
	if "Pt" in hist_name:
		hist  = ROOT.TH1F(hist_name,str(branch_names[branch_i]) + ' Distribtion',100,0,450)
		hist.SetName(hist_name)
		histograms.Write()
	elif ("Eta" in hist_name) or ("Phi" in hist_name):
		hist  = ROOT.TH1F(hist_name,str(branch_names[branch_i]) + ' Distribtion',100,-8,8)
		print(hist_name)
		hist.SetName(hist_name)
		histograms.Write()
	elif "Mass" in hist_name:
		hist  = ROOT.TH1F(hist_name,str(branch_names[branch_i]) + ' Distribtion',100,0,3000)
		hist.SetName(hist_name)
		histograms.Write()
	else:
		hist  = ROOT.TH1F(hist_name,str(branch_names[branch_i]) + ' Distribtion',100,0,450)
                hist.SetName(hist_name)
		histograms.Write()
#histograms.Write()
#h_genEta_1 = ROOT.TH1F("h_genEta_1","Gen Jet_1 #eta Distribtion",100,-8,8)
#h_genPhi_1 = ROOT.TH1F("h_genPhi_1","Gen Jet_1 #phi Distribtion",100,-8,8)
#h_genPt_2 = ROOT.TH1F("h_genPt_2","Gen Jet_2 Pt Distribtion",100,0,450)
#h_genEta_2 = ROOT.TH1F("h_genEta_2","Gen Jet_2 #eta Distribtion",100,-8,8)
#h_genPhi_2 = ROOT.TH1F("h_genPhi_2","Gen Jet_2 #phi Distribtion",100,-8,8)
#h_genMass = ROOT.TH1F("h_genMass","Gen Jet Mass Distribtion",100,0,3000)
#h_genDeltaEta = ROOT.TH1F("h_genDeltaEta","Gen Jet #Delta#eta Distribtion",100,-8,8)
#h_genDeltaPhi = ROOT.TH1F("h_genDeltaPhi","Gen Jet #Delta#phi Distribtion",100,-8,8)
h_run = histograms.Get("h_run")
h_lumi = histograms.Get("h_lumi")
h_event = histograms.Get("h_event")
h_recoPt_1 = histograms.Get("h_recoPt_1")
h_recoEta_1 = histograms.Get("h_recoEta_1")
h_recoPhi_1 = histograms.Get("h_recoPhi_1")
h_recoNthJet_1 = histograms.Get("h_recoNthJet_1")
h_recoPt_2 = histograms.Get("h_recoPt_2")
h_recoEta_2 = histograms.Get("h_recoEta_2")
h_recoPhi_2 = histograms.Get("h_recoPhi_2")
h_recoNthJet_2 = histograms.Get("h_recoNthJet_2") 
h_recoDeltaEta = histograms.Get("h_recoDeltaEta")
h_recoDeltaPhi = histograms.Get("h_recoDeltaPhi")
h_recoDeltaR = histograms.Get("h_recoDeltaR")
h_recoMass = histograms.Get("h_recoMass")
h_l1Pt_1 = histograms.Get("h_l1Pt_1")
h_l1Eta_1 = histograms.Get("h_l1Eta_1") 
h_l1Phi_1 = histograms.Get("h_l1Phi_1")
h_l1NthJet_1 = histograms.Get("h_l1NthJet_1")
h_l1Pt_2 = histograms.Get("h_l1Pt_2")
h_l1Eta_2 = histograms.Get("h_l1Eta_2")
h_l1Phi_2 = histograms.Get("h_l1Phi_2")
h_l1NthJet_2 = histograms.Get("h_l1NthJet_2")
h_l1DeltaEta = histograms.Get("h_l1DeltaEta")
h_l1DeltaPhi = histograms.Get("h_l1DeltaPhi")
h_l1DeltaR = histograms.Get("h_l1DeltaR")
h_l1Mass = histograms.Get("h_l1Mass")
h_l1Matched_1 = histograms.Get("h_l1Matched_1")
h_l1Matched_2 = histograms.Get("h_l1Matched_2")
h_nRecoJets = histograms.Get("h_nRecoJets")
h_nL1Jets = histograms.Get("h_nL1Jets")

for entry_i in range(tree.GetEntries()):
	tree.GetEntry(entry_i)
	h_run.Fill(tree.run)
	h_lumi.Fill(tree.lumi)
	h_event.Fill(tree.event)
	h_recoPt_1.Fill(tree.recoPt_1)
	h_recoEta_1.Fill(tree.recoEta_1)
	h_recoPhi_1.Fill(tree.recoPhi_1)
	h_recoNthJet_1.Fill(tree.recoNthJet_1)
	h_recoPt_2.Fill(tree.recoPt_2)
	h_recoEta_2.Fill(tree.recoEta_2)
	h_recoPhi_2.Fill(tree.recoPhi_2)
	h_recoNthJet_2.Fill(tree.recoNthJet_2)
	h_recoDeltaEta.Fill(tree.recoDeltaEta)
	h_recoDeltaPhi.Fill(tree.recoDeltaPhi)
	h_recoDeltaR.Fill(tree.recoDeltaR)
	h_recoMass.Fill(tree.recoMass)
	h_l1Pt_1.Fill(tree.l1Pt_1)
	h_l1Eta_1.Fill(tree.l1Eta_1)
	h_l1Phi_1.Fill(tree.l1Phi_1)
	h_l1NthJet_1.Fill(tree.l1NthJet_1)
	h_l1Pt_2.Fill(tree.l1Pt_2)
	h_l1Eta_2.Fill(tree.l1Eta_2)
	h_l1Phi_2.Fill(tree.l1Phi_2)
	h_l1NthJet_2.Fill(tree.l1NthJet_2)
	h_l1DeltaEta.Fill(tree.l1DeltaEta)
	h_l1DeltaPhi.Fill(tree.l1DeltaPhi)
	h_l1DeltaR.Fill(tree.l1DeltaR)
	h_l1Mass.Fill(tree.l1Mass)
	h_l1Matched_1.Fill(tree.l1Matched_1)
	h_l1Matched_2.Fill(tree.l1Matched_2)
	h_nRecoJets.Fill(tree.nRecoJets)
	h_nL1Jets.Fill(tree.nL1Jets)

histograms.Write()
for branch_i in range(0, branch_list.GetEntries()):
	hist_name = 'h_' + str(branch_names[branch_i])
	print(ROOT.gDirectory.FindObject(hist_name))
	if not(ROOT.gDirectory.FindObject(hist_name)):
		continue;
	else:
		h = histograms.Get(hist_name)
		c1 = ROOT.TCanvas()
		#legend = ROOT.TLegend(0.8,0.4,0.95,0.55)
		legend = ROOT.TLegend(0.78,0.60,.98,0.75)
		legend.SetTextSize(0.03)
		legend.SetFillStyle(0)
                h.GetXaxis().SetTitle(hist_name)
                h.GetYaxis().SetTitle("Number of events")
		h.Draw()
		legend.AddEntry(h,"VBFH#tau#tau","l")
		legend.Draw("same")
		c1.Update()
		c1.SaveAs(hist_name + '.png')
