
Processing TMVAAnalysis.C...
<HEADER> DataSetInfo              : [dataset] : Added class "Signal"
                         : Add Tree efficiencyTree of type Signal with 59472 events
<HEADER> DataSetInfo              : [dataset] : Added class "Background"
                         : Add Tree efficiencyTree of type Background with 60000 events
<HEADER> Factory                  : Booking method: BDT
                         : 
<HEADER> DataSetFactory           : [dataset] : Number of events in input trees
                         : Dataset[dataset] :     Signal     requirement: "l1Pt_1 > 0 && l1Pt_2 > 0 && l1Mass > 0"
                         : Dataset[dataset] :     Signal          -- number of events passed: 30977  / sum of weights: 30977
                         : Dataset[dataset] :     Signal          -- efficiency             : 0.520867
                         : Dataset[dataset] :     Background requirement: "l1Pt_1 > 0 && l1Pt_2 > 0 && l1Mass > 0"
                         : Dataset[dataset] :     Background      -- number of events passed: 25827  / sum of weights: 25827
                         : Dataset[dataset] :     Background      -- efficiency             : 0.43045
                         : Dataset[dataset] :  you have opted for interpreting the requested number of training/testing events
                         :  to be the number of events AFTER your preselection cuts
                         : 
                         : Dataset[dataset] :  you have opted for interpreting the requested number of training/testing events
                         :  to be the number of events AFTER your preselection cuts
                         : 
                         : Dataset[dataset] : Weight renormalisation mode: "EqualNumEvents": renormalises all event classes ...
                         : Dataset[dataset] :  such that the effective (weighted) number of events in each class is the same 
                         : Dataset[dataset] :  (and equals the number of events (entries) given for class=0 )
                         : Dataset[dataset] : ... i.e. such that Sum[i=1..N_j]{w_i} = N_classA, j=classA, classB, ...
                         : Dataset[dataset] : ... (note that N_j is the sum of TRAINING events
                         : Dataset[dataset] :  ..... Testing events are not renormalised nor included in the renormalisation factor!)
                         : Number of training and testing events
                         : ---------------------------------------------------------------------------
                         : Signal     -- training events            : 15488
                         : Signal     -- testing events             : 15488
                         : Signal     -- training and testing events: 30976
                         : Dataset[dataset] : Signal     -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.520867
                         : Background -- training events            : 12913
                         : Background -- testing events             : 12913
                         : Background -- training and testing events: 25826
                         : Dataset[dataset] : Background -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.43045
                         : 
<HEADER> DataSetInfo              : Correlation matrix (Signal):
                         : ---------------------------------------------------------
                         :              l1Pt_1  l1Pt_2 l1DeltaEta l1DeltaPhi  l1Mass
                         :     l1Pt_1:  +1.000  +0.682     -0.004     -0.015  +0.360
                         :     l1Pt_2:  +0.682  +1.000     -0.002     -0.008  +0.377
                         : l1DeltaEta:  -0.004  -0.002     +1.000     +0.003  -0.016
                         : l1DeltaPhi:  -0.015  -0.008     +0.003     +1.000  -0.008
                         :     l1Mass:  +0.360  +0.377     -0.016     -0.008  +1.000
                         : ---------------------------------------------------------
<HEADER> DataSetInfo              : Correlation matrix (Background):
                         : ---------------------------------------------------------
                         :              l1Pt_1  l1Pt_2 l1DeltaEta l1DeltaPhi  l1Mass
                         :     l1Pt_1:  +1.000  +0.655     +0.004     +0.003  +0.668
                         :     l1Pt_2:  +0.655  +1.000     +0.004     +0.003  +0.677
                         : l1DeltaEta:  +0.004  +0.004     +1.000     +0.002  -0.020
                         : l1DeltaPhi:  +0.003  +0.003     +0.002     +1.000  -0.001
                         :     l1Mass:  +0.668  +0.677     -0.020     -0.001  +1.000
                         : ---------------------------------------------------------
<HEADER> DataSetFactory           : [dataset] :  
                         : 
<HEADER> Factory                  : Booking method: MLP_1
                         : 
<HEADER> MLP_1                    : [dataset] : Create Transformation "N" with events from all classes.
                         : 
<HEADER>                          : Transformation, Variable selection : 
                         : Input : variable 'l1Pt_1' <---> Output : variable 'l1Pt_1'
                         : Input : variable 'l1Pt_2' <---> Output : variable 'l1Pt_2'
                         : Input : variable 'l1DeltaEta' <---> Output : variable 'l1DeltaEta'
                         : Input : variable 'l1DeltaPhi' <---> Output : variable 'l1DeltaPhi'
                         : Input : variable 'l1Mass' <---> Output : variable 'l1Mass'
<HEADER> MLP_1                    : Building Network. 
                         : Initializing weights
<HEADER> Factory                  : Booking method: MLP_2
                         : 
<HEADER> MLP_2                    : [dataset] : Create Transformation "N" with events from all classes.
                         : 
<HEADER>                          : Transformation, Variable selection : 
                         : Input : variable 'l1Pt_1' <---> Output : variable 'l1Pt_1'
                         : Input : variable 'l1Pt_2' <---> Output : variable 'l1Pt_2'
                         : Input : variable 'l1DeltaEta' <---> Output : variable 'l1DeltaEta'
                         : Input : variable 'l1DeltaPhi' <---> Output : variable 'l1DeltaPhi'
                         : Input : variable 'l1Mass' <---> Output : variable 'l1Mass'
<HEADER> MLP_2                    : Building Network. 
                         : Initializing weights
<HEADER> Factory                  : Booking method: MLP_3
                         : 
<HEADER> MLP_3                    : [dataset] : Create Transformation "Decorrelate" with events from all classes.
                         : 
<HEADER>                          : Transformation, Variable selection : 
                         : Input : variable 'l1Pt_1' <---> Output : variable 'l1Pt_1'
                         : Input : variable 'l1Pt_2' <---> Output : variable 'l1Pt_2'
                         : Input : variable 'l1DeltaEta' <---> Output : variable 'l1DeltaEta'
                         : Input : variable 'l1DeltaPhi' <---> Output : variable 'l1DeltaPhi'
                         : Input : variable 'l1Mass' <---> Output : variable 'l1Mass'
<HEADER> MLP_3                    : Building Network. 
                         : Initializing weights
<HEADER> Factory                  : Train all methods
<HEADER> Factory                  : [dataset] : Create Transformation "I" with events from all classes.
                         : 
<HEADER>                          : Transformation, Variable selection : 
                         : Input : variable 'l1Pt_1' <---> Output : variable 'l1Pt_1'
                         : Input : variable 'l1Pt_2' <---> Output : variable 'l1Pt_2'
                         : Input : variable 'l1DeltaEta' <---> Output : variable 'l1DeltaEta'
                         : Input : variable 'l1DeltaPhi' <---> Output : variable 'l1DeltaPhi'
                         : Input : variable 'l1Mass' <---> Output : variable 'l1Mass'
<HEADER> TFHandler_Factory        :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:      86.345      63.214   [      5.5000      511.50 ]
                         :     l1Pt_2:      56.544      41.731   [      5.5000      511.50 ]
                         : l1DeltaEta:   -0.021114      2.3054   [     -8.5800      8.9400 ]
                         : l1DeltaPhi:    0.028360      2.9403   [     -6.1912      6.1912 ]
                         :     l1Mass:      247.28      301.11   [      8.9309      5373.8 ]
                         : ---------------------------------------------------------------------
                         : Ranking input variables (method unspecific)...
<HEADER> IdTransformation         : Ranking result (top variable is best ranked)
                         : -----------------------------------
                         : Rank : Variable   : Separation
                         : -----------------------------------
                         :    1 : l1DeltaEta : 1.687e-01
                         :    2 : l1Mass     : 6.305e-02
                         :    3 : l1DeltaPhi : 2.161e-02
                         :    4 : l1Pt_1     : 1.157e-02
                         :    5 : l1Pt_2     : 1.005e-02
                         : -----------------------------------
<HEADER> Factory                  : Train method: BDT for Classification
                         : 
<HEADER> BDT                      : #events: (reweighted) sig: 14200.5 bkg: 14200.5
                         : #events: (unweighted) sig: 15488 bkg: 12913
                         : Training 800 Decision Trees ... patience please
                         : Elapsed time for training with 28401 events: 10.1 sec         
<HEADER> BDT                      : [dataset] : Evaluation of BDT on training sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 2.46 sec       
                         : Creating xml weight file: dataset/weights/TMVAClassification_BDT.weights.xml
                         : Creating standalone class: dataset/weights/TMVAClassification_BDT.class.C
                         : TMVA_output.root:/dataset/Method_BDT/BDT
<HEADER> Factory                  : Training finished
                         : 
<HEADER> Factory                  : Train method: MLP_1 for Classification
                         : 
                         : 
                         : ================================================================
                         : H e l p   f o r   M V A   m e t h o d   [ MLP_1 ] :
                         : 
                         : --- Short description:
                         : 
                         : The MLP artificial neural network (ANN) is a traditional feed-
                         : forward multilayer perceptron implementation. The MLP has a user-
                         : defined hidden layer architecture, while the number of input (output)
                         : nodes is determined by the input variables (output classes, i.e., 
                         : signal and one background). 
                         : 
                         : --- Performance optimisation:
                         : 
                         : Neural networks are stable and performing for a large variety of 
                         : linear and non-linear classification problems. However, in contrast
                         : to (e.g.) boosted decision trees, the user is advised to reduce the 
                         : number of input variables that have only little discrimination power. 
                         : 
                         : In the tests we have carried out so far, the MLP and ROOT networks
                         : (TMlpANN, interfaced via TMVA) performed equally well, with however
                         : a clear speed advantage for the MLP. The Clermont-Ferrand neural 
                         : net (CFMlpANN) exhibited worse classification performance in these
                         : tests, which is partly due to the slow convergence of its training
                         : (at least 10k training cycles are required to achieve approximately
                         : competitive results).
                         : 
                         : Overtraining: only the TMlpANN performs an explicit separation of the
                         : full training sample into independent training and validation samples.
                         : We have found that in most high-energy physics applications the 
                         : available degrees of freedom (training events) are sufficient to 
                         : constrain the weights of the relatively simple architectures required
                         : to achieve good performance. Hence no overtraining should occur, and 
                         : the use of validation samples would only reduce the available training
                         : information. However, if the performance on the training sample is 
                         : found to be significantly better than the one found with the inde-
                         : pendent test sample, caution is needed. The results for these samples 
                         : are printed to standard output at the end of each training job.
                         : 
                         : --- Performance tuning via configuration options:
                         : 
                         : The hidden layer architecture for all ANNs is defined by the option
                         : "HiddenLayers=N+1,N,...", where here the first hidden layer has N+1
                         : neurons and the second N neurons (and so on), and where N is the number  
                         : of input variables. Excessive numbers of hidden layers should be avoided,
                         : in favour of more neurons in the first hidden layer.
                         : 
                         : The number of cycles should be above 500. As said, if the number of
                         : adjustable weights is small compared to the training sample size,
                         : using a large number of training samples should not lead to overtraining.
                         : 
                         : <Suppress this message by specifying "!H" in the booking option>
                         : ================================================================
                         : 
<HEADER> TFHandler_MLP_1          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:    -0.68045     0.24986   [     -1.0000      1.0000 ]
                         :     l1Pt_2:    -0.79824     0.16495   [     -1.0000      1.0000 ]
                         : l1DeltaEta:   -0.022958     0.26317   [     -1.0000      1.0000 ]
                         : l1DeltaPhi:   0.0045807     0.47492   [     -1.0000      1.0000 ]
                         :     l1Mass:    -0.91115     0.11225   [     -1.0000      1.0000 ]
                         : ---------------------------------------------------------------------
                         : Training Network
                         : 
                         : Inaccurate progress timing for MLP... 
                         : Elapsed time for training with 28401 events: 26.2 sec         
<HEADER> MLP_1                    : [dataset] : Evaluation of MLP_1 on training sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 0.0522 sec       
                         : Creating xml weight file: dataset/weights/TMVAClassification_MLP_1.weights.xml
                         : Creating standalone class: dataset/weights/TMVAClassification_MLP_1.class.C
                         : Write special histos to file: TMVA_output.root:/dataset/Method_MLP_1/MLP_1
<HEADER> Factory                  : Training finished
                         : 
<HEADER> Factory                  : Train method: MLP_2 for Classification
                         : 
                         : 
                         : ================================================================
                         : H e l p   f o r   M V A   m e t h o d   [ MLP_2 ] :
                         : 
                         : --- Short description:
                         : 
                         : The MLP artificial neural network (ANN) is a traditional feed-
                         : forward multilayer perceptron implementation. The MLP has a user-
                         : defined hidden layer architecture, while the number of input (output)
                         : nodes is determined by the input variables (output classes, i.e., 
                         : signal and one background). 
                         : 
                         : --- Performance optimisation:
                         : 
                         : Neural networks are stable and performing for a large variety of 
                         : linear and non-linear classification problems. However, in contrast
                         : to (e.g.) boosted decision trees, the user is advised to reduce the 
                         : number of input variables that have only little discrimination power. 
                         : 
                         : In the tests we have carried out so far, the MLP and ROOT networks
                         : (TMlpANN, interfaced via TMVA) performed equally well, with however
                         : a clear speed advantage for the MLP. The Clermont-Ferrand neural 
                         : net (CFMlpANN) exhibited worse classification performance in these
                         : tests, which is partly due to the slow convergence of its training
                         : (at least 10k training cycles are required to achieve approximately
                         : competitive results).
                         : 
                         : Overtraining: only the TMlpANN performs an explicit separation of the
                         : full training sample into independent training and validation samples.
                         : We have found that in most high-energy physics applications the 
                         : available degrees of freedom (training events) are sufficient to 
                         : constrain the weights of the relatively simple architectures required
                         : to achieve good performance. Hence no overtraining should occur, and 
                         : the use of validation samples would only reduce the available training
                         : information. However, if the performance on the training sample is 
                         : found to be significantly better than the one found with the inde-
                         : pendent test sample, caution is needed. The results for these samples 
                         : are printed to standard output at the end of each training job.
                         : 
                         : --- Performance tuning via configuration options:
                         : 
                         : The hidden layer architecture for all ANNs is defined by the option
                         : "HiddenLayers=N+1,N,...", where here the first hidden layer has N+1
                         : neurons and the second N neurons (and so on), and where N is the number  
                         : of input variables. Excessive numbers of hidden layers should be avoided,
                         : in favour of more neurons in the first hidden layer.
                         : 
                         : The number of cycles should be above 500. As said, if the number of
                         : adjustable weights is small compared to the training sample size,
                         : using a large number of training samples should not lead to overtraining.
                         : 
                         : <Suppress this message by specifying "!H" in the booking option>
                         : ================================================================
                         : 
<HEADER> TFHandler_MLP_2          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:    -0.68045     0.24986   [     -1.0000      1.0000 ]
                         :     l1Pt_2:    -0.79824     0.16495   [     -1.0000      1.0000 ]
                         : l1DeltaEta:   -0.022958     0.26317   [     -1.0000      1.0000 ]
                         : l1DeltaPhi:   0.0045807     0.47492   [     -1.0000      1.0000 ]
                         :     l1Mass:    -0.91115     0.11225   [     -1.0000      1.0000 ]
                         : ---------------------------------------------------------------------
                         : Training Network
                         : 
                         : Elapsed time for training with 28401 events: 85.2 sec         
<HEADER> MLP_2                    : [dataset] : Evaluation of MLP_2 on training sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 0.0517 sec       
                         : Creating xml weight file: dataset/weights/TMVAClassification_MLP_2.weights.xml
                         : Creating standalone class: dataset/weights/TMVAClassification_MLP_2.class.C
                         : Write special histos to file: TMVA_output.root:/dataset/Method_MLP_2/MLP_2
<HEADER> Factory                  : Training finished
                         : 
<HEADER> Factory                  : Train method: MLP_3 for Classification
                         : 
                         : 
                         : ================================================================
                         : H e l p   f o r   M V A   m e t h o d   [ MLP_3 ] :
                         : 
                         : --- Short description:
                         : 
                         : The MLP artificial neural network (ANN) is a traditional feed-
                         : forward multilayer perceptron implementation. The MLP has a user-
                         : defined hidden layer architecture, while the number of input (output)
                         : nodes is determined by the input variables (output classes, i.e., 
                         : signal and one background). 
                         : 
                         : --- Performance optimisation:
                         : 
                         : Neural networks are stable and performing for a large variety of 
                         : linear and non-linear classification problems. However, in contrast
                         : to (e.g.) boosted decision trees, the user is advised to reduce the 
                         : number of input variables that have only little discrimination power. 
                         : 
                         : In the tests we have carried out so far, the MLP and ROOT networks
                         : (TMlpANN, interfaced via TMVA) performed equally well, with however
                         : a clear speed advantage for the MLP. The Clermont-Ferrand neural 
                         : net (CFMlpANN) exhibited worse classification performance in these
                         : tests, which is partly due to the slow convergence of its training
                         : (at least 10k training cycles are required to achieve approximately
                         : competitive results).
                         : 
                         : Overtraining: only the TMlpANN performs an explicit separation of the
                         : full training sample into independent training and validation samples.
                         : We have found that in most high-energy physics applications the 
                         : available degrees of freedom (training events) are sufficient to 
                         : constrain the weights of the relatively simple architectures required
                         : to achieve good performance. Hence no overtraining should occur, and 
                         : the use of validation samples would only reduce the available training
                         : information. However, if the performance on the training sample is 
                         : found to be significantly better than the one found with the inde-
                         : pendent test sample, caution is needed. The results for these samples 
                         : are printed to standard output at the end of each training job.
                         : 
                         : --- Performance tuning via configuration options:
                         : 
                         : The hidden layer architecture for all ANNs is defined by the option
                         : "HiddenLayers=N+1,N,...", where here the first hidden layer has N+1
                         : neurons and the second N neurons (and so on), and where N is the number  
                         : of input variables. Excessive numbers of hidden layers should be avoided,
                         : in favour of more neurons in the first hidden layer.
                         : 
                         : The number of cycles should be above 500. As said, if the number of
                         : adjustable weights is small compared to the training sample size,
                         : using a large number of training samples should not lead to overtraining.
                         : 
                         : <Suppress this message by specifying "!H" in the booking option>
                         : ================================================================
                         : 
                         : Preparing the Decorrelation transformation...
<HEADER> TFHandler_MLP_3          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:      1.0149      1.0000   [     -3.7062      9.9897 ]
                         :     l1Pt_2:     0.84539      1.0000   [     -4.1988      14.099 ]
                         : l1DeltaEta:  -0.0049753      1.0000   [     -3.4630      4.1173 ]
                         : l1DeltaPhi:    0.016542      1.0000   [     -2.0938      2.1128 ]
                         :     l1Mass:     0.71747      1.0000   [   -0.056777      18.327 ]
                         : ---------------------------------------------------------------------
                         : Training Network
                         : 
                         : Inaccurate progress timing for MLP... 
                         : Elapsed time for training with 28401 events: 22.2 sec         
<HEADER> MLP_3                    : [dataset] : Evaluation of MLP_3 on training sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 0.0565 sec       
                         : Creating xml weight file: dataset/weights/TMVAClassification_MLP_3.weights.xml
                         : Creating standalone class: dataset/weights/TMVAClassification_MLP_3.class.C
                         : Write special histos to file: TMVA_output.root:/dataset/Method_MLP_3/MLP_3
<HEADER> Factory                  : Training finished
                         : 
                         : Ranking input variables (method specific)...
<HEADER> BDT                      : Ranking result (top variable is best ranked)
                         : --------------------------------------------
                         : Rank : Variable   : Variable Importance
                         : --------------------------------------------
                         :    1 : l1DeltaEta : 2.676e-01
                         :    2 : l1DeltaPhi : 2.198e-01
                         :    3 : l1Pt_1     : 1.798e-01
                         :    4 : l1Mass     : 1.712e-01
                         :    5 : l1Pt_2     : 1.616e-01
                         : --------------------------------------------
<HEADER> MLP_1                    : Ranking result (top variable is best ranked)
                         : -----------------------------------
                         : Rank : Variable   : Importance
                         : -----------------------------------
                         :    1 : l1Mass     : 1.586e+02
                         :    2 : l1DeltaPhi : 4.655e+01
                         :    3 : l1Pt_2     : 3.662e+01
                         :    4 : l1Pt_1     : 1.374e+01
                         :    5 : l1DeltaEta : 5.984e+00
                         : -----------------------------------
<HEADER> MLP_2                    : Ranking result (top variable is best ranked)
                         : -----------------------------------
                         : Rank : Variable   : Importance
                         : -----------------------------------
                         :    1 : l1Mass     : 1.609e+02
                         :    2 : l1DeltaPhi : 4.794e+01
                         :    3 : l1Pt_2     : 3.816e+01
                         :    4 : l1Pt_1     : 1.438e+01
                         :    5 : l1DeltaEta : 5.708e+00
                         : -----------------------------------
<HEADER> MLP_3                    : Ranking result (top variable is best ranked)
                         : -----------------------------------
                         : Rank : Variable   : Importance
                         : -----------------------------------
                         :    1 : l1Mass     : 9.755e+01
                         :    2 : l1DeltaPhi : 6.743e+01
                         :    3 : l1Pt_1     : 1.837e+01
                         :    4 : l1Pt_2     : 6.762e+00
                         :    5 : l1DeltaEta : 5.458e-01
                         : -----------------------------------
<HEADER> Factory                  : === Destroy and recreate all methods via weight files for testing ===
                         : 
<HEADER> MLP_1                    : Building Network. 
                         : Initializing weights
<HEADER> MLP_2                    : Building Network. 
                         : Initializing weights
<HEADER> MLP_3                    : Building Network. 
                         : Initializing weights
<HEADER> Factory                  : Test all methods
<HEADER> Factory                  : Test method: BDT for Classification performance
                         : 
<HEADER> BDT                      : [dataset] : Evaluation of BDT on testing sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 1.71 sec       
<HEADER> Factory                  : Test method: MLP_1 for Classification performance
                         : 
<HEADER> MLP_1                    : [dataset] : Evaluation of MLP_1 on testing sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 0.0533 sec       
<HEADER> Factory                  : Test method: MLP_2 for Classification performance
                         : 
<HEADER> MLP_2                    : [dataset] : Evaluation of MLP_2 on testing sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 0.0527 sec       
<HEADER> Factory                  : Test method: MLP_3 for Classification performance
                         : 
<HEADER> MLP_3                    : [dataset] : Evaluation of MLP_3 on testing sample (28401 events)
                         : Elapsed time for evaluation of 28401 events: 0.0524 sec       
<HEADER> Factory                  : Evaluate all methods
<HEADER> Factory                  : Evaluate classifier: BDT
                         : 
<HEADER> BDT                      : [dataset] : Loop over test events and fill histograms with classifier response...
                         : 
<HEADER> TFHandler_BDT            :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:      85.368      61.199   [      5.5000      511.50 ]
                         :     l1Pt_2:      55.793      40.822   [      5.5000      511.50 ]
                         : l1DeltaEta:   0.0086760      2.3650   [     -8.7600      9.1200 ]
                         : l1DeltaPhi:  -0.0073196      2.9411   [     -6.1912      6.1912 ]
                         :     l1Mass:      254.94      327.32   [      7.0847      6744.3 ]
                         : ---------------------------------------------------------------------
<HEADER> Factory                  : Evaluate classifier: MLP_1
                         : 
<HEADER> TFHandler_MLP_1          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:    -0.68432     0.24189   [     -1.0000      1.0000 ]
                         :     l1Pt_2:    -0.80121     0.16135   [     -1.0000      1.0000 ]
                         : l1DeltaEta:   -0.019558     0.26998   [     -1.0205      1.0205 ]
                         : l1DeltaPhi:  -0.0011822     0.47504   [     -1.0000      1.0000 ]
                         :     l1Mass:    -0.90829     0.12202   [     -1.0007      1.5109 ]
                         : ---------------------------------------------------------------------
<HEADER> MLP_1                    : [dataset] : Loop over test events and fill histograms with classifier response...
                         : 
<HEADER> TFHandler_MLP_1          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:    -0.68432     0.24189   [     -1.0000      1.0000 ]
                         :     l1Pt_2:    -0.80121     0.16135   [     -1.0000      1.0000 ]
                         : l1DeltaEta:   -0.019558     0.26998   [     -1.0205      1.0205 ]
                         : l1DeltaPhi:  -0.0011822     0.47504   [     -1.0000      1.0000 ]
                         :     l1Mass:    -0.90829     0.12202   [     -1.0007      1.5109 ]
                         : ---------------------------------------------------------------------
<HEADER> Factory                  : Evaluate classifier: MLP_2
                         : 
<HEADER> TFHandler_MLP_2          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:    -0.68432     0.24189   [     -1.0000      1.0000 ]
                         :     l1Pt_2:    -0.80121     0.16135   [     -1.0000      1.0000 ]
                         : l1DeltaEta:   -0.019558     0.26998   [     -1.0205      1.0205 ]
                         : l1DeltaPhi:  -0.0011822     0.47504   [     -1.0000      1.0000 ]
                         :     l1Mass:    -0.90829     0.12202   [     -1.0007      1.5109 ]
                         : ---------------------------------------------------------------------
<HEADER> MLP_2                    : [dataset] : Loop over test events and fill histograms with classifier response...
                         : 
<HEADER> TFHandler_MLP_2          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:    -0.68432     0.24189   [     -1.0000      1.0000 ]
                         :     l1Pt_2:    -0.80121     0.16135   [     -1.0000      1.0000 ]
                         : l1DeltaEta:   -0.019558     0.26998   [     -1.0205      1.0205 ]
                         : l1DeltaPhi:  -0.0011822     0.47504   [     -1.0000      1.0000 ]
                         :     l1Mass:    -0.90829     0.12202   [     -1.0007      1.5109 ]
                         : ---------------------------------------------------------------------
<HEADER> Factory                  : Evaluate classifier: MLP_3
                         : 
<HEADER> TFHandler_MLP_3          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:     0.99479     0.97200   [     -4.7794      9.2800 ]
                         :     l1Pt_2:     0.82245     0.98409   [     -4.9509      12.476 ]
                         : l1DeltaEta:   0.0086142      1.0261   [     -3.6066      4.1675 ]
                         : l1DeltaPhi:   0.0044559      1.0003   [     -2.1047      2.1111 ]
                         :     l1Mass:     0.74541      1.0919   [    -0.11194      23.015 ]
                         : ---------------------------------------------------------------------
<HEADER> MLP_3                    : [dataset] : Loop over test events and fill histograms with classifier response...
                         : 
<HEADER> TFHandler_MLP_3          :   Variable          Mean          RMS   [        Min          Max ]
                         : ---------------------------------------------------------------------
                         :     l1Pt_1:     0.99479     0.97200   [     -4.7794      9.2800 ]
                         :     l1Pt_2:     0.82245     0.98409   [     -4.9509      12.476 ]
                         : l1DeltaEta:   0.0086142      1.0261   [     -3.6066      4.1675 ]
                         : l1DeltaPhi:   0.0044559      1.0003   [     -2.1047      2.1111 ]
                         :     l1Mass:     0.74541      1.0919   [    -0.11194      23.015 ]
                         : ---------------------------------------------------------------------
                         : 
                         : Evaluation results ranked by best signal efficiency and purity (area)
                         : -------------------------------------------------------------------------------------------------------------------
                         : DataSet       MVA                       
                         : Name:         Method:          ROC-integ
                         : dataset       MLP_3          : 0.766
                         : dataset       MLP_2          : 0.765
                         : dataset       MLP_1          : 0.764
                         : dataset       BDT            : 0.763
                         : -------------------------------------------------------------------------------------------------------------------
                         : 
                         : Testing efficiency compared to training efficiency (overtraining check)
                         : -------------------------------------------------------------------------------------------------------------------
                         : DataSet              MVA              Signal efficiency: from test sample (from training sample) 
                         : Name:                Method:          @B=0.01             @B=0.10            @B=0.30   
                         : -------------------------------------------------------------------------------------------------------------------
                         : dataset              MLP_3          : 0.133 (0.141)       0.424 (0.426)      0.686 (0.687)
                         : dataset              MLP_2          : 0.136 (0.139)       0.427 (0.429)      0.688 (0.690)
                         : dataset              MLP_1          : 0.134 (0.138)       0.429 (0.428)      0.686 (0.689)
                         : dataset              BDT            : 0.120 (0.132)       0.419 (0.435)      0.682 (0.696)
                         : -------------------------------------------------------------------------------------------------------------------
                         : 
<HEADER> Dataset:dataset          : Created tree 'TestTree' with 28401 events
                         : 
<HEADER> Dataset:dataset          : Created tree 'TrainTree' with 28401 events
                         : 
<HEADER> Factory                  : Thank you for using TMVA!
                         : For citation information, please visit: http://tmva.sf.net/citeTMVA.html
